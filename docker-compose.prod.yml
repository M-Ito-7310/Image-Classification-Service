version: '3.8'

services:
  # Frontend Service - Optimized for Production
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
      target: production
    container_name: ai-classifier-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://api.yourdomain.com
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    networks:
      - ai-classifier-network
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service - Production Optimized
  backend:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      target: production
    container_name: ai-classifier-backend-prod
    ports:
      - "8000:8000"
    environment:
      - FASTAPI_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLOUD_VISION_API_KEY=${GOOGLE_CLOUD_VISION_API_KEY}
      - MAX_FILE_SIZE=10485760
      - ALLOWED_EXTENSIONS=jpg,jpeg,png,webp,bmp
      - ENABLE_METRICS=true
      - LOG_LEVEL=INFO
    volumes:
      - ai-uploads:/app/uploads
      - ai-models:/app/models
    networks:
      - ai-classifier-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: ai-classifier-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-image_classification}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - ai-classifier-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-image_classification}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: ai-classifier-redis-prod
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - ai-classifier-network
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy - Production Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ai-classifier-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - ai-classifier-network
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Optional Prometheus + Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-classifier-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-classifier-network
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: ai-classifier-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    networks:
      - ai-classifier-network
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  ai-classifier-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  ai-uploads:
    driver: local
  ai-models:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local