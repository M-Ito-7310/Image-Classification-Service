version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: image_classification_db
    environment:
      POSTGRES_DB: image_classification_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: image_classification_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: image_classification_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@database:5432/image_classification_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_HOSTS=["http://localhost:3000", "http://127.0.0.1:3000"]
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
        - action: rebuild
          path: ./backend/requirements.txt

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: image_classification_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src

  # Nginx Reverse Proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: image_classification_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - backend_uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  default:
    name: image_classification_network